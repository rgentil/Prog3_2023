Hashing

Guardar un dato clave y ayudar a la busqueda de los datos. Y asociar el resto de la informacion

Mediante esa clave se recuperan datos.

Se requiere un mecanismo de acceso asociativo. 

Hasta el momento
	‚Äì Array ordenado: Log2(N) (b√∫squeda binaria)
	‚Äì √Årbol binario ordenado: Log2 (N) (balanceado)
	‚Äì √Årboles n-arios de orden p = Log p (N) (balanceados)
	
Definimos una funci√≥n h (llamada funci√≥n de hashing) que, dada una clave de b√∫squeda x, determine la posici√≥n de almacenamiento de sus datos asociados.
Se aporta x, se aplica h(x) ‚Üí posici√≥n de los datos asociados a x
La idea de las estructuras de dispersi√≥n es llevar este tiempo de b√∫squeda a O(1) o cercano, utilizando las t√©cnicas de dispersi√≥n o hashing.
Es una estructura particularmente valiosa en aplicaciones con una frecuencia de b√∫squedas muy alta, donde el tiempo de b√∫squeda sea cr√≠tico.

Conceptos
	‚ñ™ x: clave de b√∫squeda perteneciente al dominio estructurante.
	‚ñ™ h(x) funci√≥n que convierte un elemento del dominio estructurante en un elemento
		del espacio de almacenamiento ‚Üí direccionamiento por contenido
	‚ñ™ Espacio de almacenamiento dividido en M baldes.
	‚ñ™ Cada balde puede contener lugar para albergar m√°s de un elemento ‚Üí cada uno
		es llamado ranura.
	‚ñ™ La funci√≥n de hashing m√°s utilizada es h(x)= x mod M. (el resto de la divisi√≥n x/M)
	‚ñ™ Generalmente se elige M como un n√∫mero primo ya que la funci√≥n mod dispersa
		los datos de manera m√°s uniforme.
		
Caracter√≠stica de las estructuras de hashing:
	‚îÄ No existe un ordenamiento f√≠sico de los datos (se encuentran dispersos por toda la estructura).
	‚îÄ Facilita la inserci√≥n y eliminaci√≥n r√°pida de registros por la clave de b√∫squeda x.
	‚îÄ La b√∫squeda asociativa, es decir aportar la clave x y recuperar el resto de los datos que la acompa√±an, en promedio tiene un costo muy bajo
		(cercano a 1)
	‚îÄ Se dan dos situaciones dependiendo de c√≥mo distribuye los datos la funci√≥n de hashing:
	
	Hashing Perfecto
		Tambi√©n conocido como distribuci√≥n perfecta o direccionamiento directo.
		La funci√≥n de hash define una direcci√≥n del espacio de almacenamiento diferente para cada elemento del dominio estructurante, o sea
		‚àÄ ùëã1 ‚â† ùëã2 ‚áí f(ùëã1) ‚â† f(ùëã2)
		Hay una funci√≥n que transforma una clave de b√∫squeda en una posici√≥n √∫nica, que no ser√° asignada a ning√∫n otro elemento.
		Son dif√≠ciles de definir ‚Üí Se aplica a dominios con regularidades matem√°ticas que puedan ser explotadas (ej. arreglos multidimensionales).
		Si se logra definir, encontrar un elemento requiere un solo acceso ya que o est√° en el lugar dado por la funci√≥n o no est√° almacenado.
		Siempre es rp = 1, sino se esta desperdiciando espacio, por ejeplo, si es rp = 2.
		
	Hashing Puro
		Dos elementos diferentes del dominio estructurante pueden ser asignados a una misma direcci√≥n del espacio de almacenamiento.
		‚Ä¢  ùëã1 ‚â† ùëã2 ‚áí f(ùëã1) = f(ùëã2)
		
		Colisi√≥n y Overflow (desborde)
			‚Ä¢ En las funciones de hashing puro no est√° garantizado que la funci√≥n env√≠e cada elemento
				a una direcci√≥n diferente: dos claves diferentes pueden tener el mismo resultado en su funci√≥n
				de hash (SIN√ìNIMOS) produciendo una colisi√≥n en ese balde.
			‚Ä¢ Overflow o Desborde: Situaci√≥n en la que un registro es asignado a una direcci√≥n (balde) que
			 no tiene suficiente espacio para ser almacenado.
	
	Estrategias para el overflow: T√©cnicas abiertas o din√°micas
		‚ñ™ Se buscan estructuras din√°micas.
		‚ñ™ El espacio de almacenamiento se expande o reduce a partir de las bajas y altas de los datos.
		‚ñ™ Veremos dos t√©cnicas:
			‚Ä¢ El espacio f√≠sico primario (array) se mantiene fijo
				‚ó¶ Hashing Separado (o con encadenamiento)
					Se crea una lista de ranuras asociada a cada balde de la estructura primaria para manejar el overflow (balde l√≥gico). 
					Estructura secundaria din√°mica (listas de reblase) Ranuras secundarias rs = 2, puede ser rp ‚â† rs	
					Estructura primaria est√°tica Ranuras primarias rp = 2.
					El problema de esto es que pueden crecer mucho esas listas y la b√∫squedas se estar√≠an alejando de o(1) por tener que recorrer una larga lista.

			‚Ä¢ El espacio f√≠sico primario se modifica
				‚ó¶ Hashing Separado con Crecimiento
					Estructura secundaria din√°mica, rs ranuras secundarias
					Estructura primaria din√°mica, rp ranuras por balde primario
					Se pretende que las listas vinculadas a cada balde f√≠sico (primario) no crezcan demasiado una respecto a otras

Hashing Separado con Crecimiento				
	‚Ä¢ Si hay colisiones se agregan elementos con un criterio de hashing separado.
	‚Ä¢ La estructura primaria se podr√° expandir y contraer din√°micamente.
		Cuando la estructura primaria crece, se reorganizan todos los elementos en la tabla de hashing (operaci√≥n costosa), 
		el efecto buscado es que decrezca la longitud de las listas de rebalse (bajando as√≠ el costo de acceso).
	‚Ä¢ El crecimiento de la estructura primaria no se da continuamente, sino	cuando se cumple cierta condici√≥n. 
		Esa condici√≥n eval√∫a c√≥mo es la cantidad de elementos actual respecto al tama√±o de la estructura primaria.
	‚Ä¢Se define el un factor de carga de dise√±o preestablecido (œÅd).
	‚Ä¢Como ya vimos, un factor de carga es una relaci√≥n entre la cantidad elementos que tiene la estructura y la capacidad 
		de la misma (teniendo en cuenta la tabla primaria solamente).
	‚Ä¢ La estructura primaria din√°mica tendr√° M baldes inicialmente (array de M baldes)
	‚Ä¢ Se calcula el l√≠mite de crecimiento L, a partir del cual la estructura primaria debe crecer. 
		Cuando la cantidad de elementos en la estructura sea mayor o igual a L, la estructura debe crecer (cambia M). 
		Se calcula L como:
			L = | M * rp * œÅd |
	‚Ä¢ ¬øC√≥mo crece la estructura? depender√° de la implementaci√≥n (de a un balde, de a muchos, duplicando tama√±o, etc). 
		El valor de M cambia entonces L tambi√©n se recalcula. Hay que reubicar todos los elementos !!
		
	Supongamos una tabla de M=12 y rp=1, y definimos un œÅd = 0,5
		Entonces L= | 12 * 1 * 0,5 | = 6
	Entonces estamos diciendo que cuando la cantidad de elementos >= 6, vamos a hacer crecer la estructura primaria.
		
		œÅd = 0,5  significa un 50% de ocupaci√≥n.
		œÅd = 0,75 significa un 75% de ocupaci√≥n.
		
		Si pd es mayor a una quiere decir que mi estrucura se va a llenar y mis elementos van a para a mis listas de rebalse.
		
	El valor que se elije para œÅd mantiene un equilibrio entre longitud de listas de rebalse vs espacio que se desperdicia.
		Un valor grande provocar√° que la estructura se llene demasiado y probablemente haya m√°s colisiones y listas de rebalse m√°s largas.
		Un valor muy bajo mantendr√° baja la relaci√≥n entre elementos en la estructura respecto al tama√±o de la misma, o sea un mayor desperdicio de espacio.
					
T√©cnicas abiertas o din√°micas: JAVA HASHTABLE
		
	Veamos el caso de la HASHTABLE de Java
		
	Valores por defecto: M=11 y œÅd = 0,5
	Siempre tiene rp=1

	Estos valores (M y œÅd) pueden setearse v√≠a el constructor.
	Cuando se crea calcula L (threshold).
	
	Como funci√≥n de hashing usa:
		h(x) = x.hashCode() mod M 
	
	x.hashCode( ) es un m√©todo definido en object y el valor que retorna es un n√∫mero que tiene que ver con la direcci√≥n de memoria donde se aloja x.
	Da un valor entero, positivo o negativo. Es el lugar de memoria en donde esta X, x la clave de memoria.
	Esto permite calcular la funci√≥n de hash sobre x que no son num√©ricos.
				
	‚Ä¢ public class Hashtable<K,V> extends Dictionary<K,V> implements Map<K,V>
	
	‚Ä¢ Declara la tabla de hashing como un array de Entry:
		‚Ä¢ private transient Entry<?,?>[ ] table;
	
	‚Ä¢ La definici√≥n de Entry es: (Entry si se quiere puede ser el balde)
		‚Ä¢ private static class Entry<K,V> implements Map.Entry<K,V> {
			int hash; //hascode que calcul√© para la clave, lo guarda
			K key;
			V value;
			Entry<K,V> next; //es una lista vinculada !!
		
		‚Ä¶}				
		
	‚Ä¢ Agrega elementos con:
		‚Ä¢ public synchronized V put(K key, V value) { ‚Ä¶ }
			‚Ä¢ Calcula el √≠ndice mediante key.hashCode( ) mod table.length.
			‚Ä¢ Si la clave ya hab√≠a sido agregada, reemplaza el value con el nuevo y devuelve el anterior en el return. Sino devuelve null.
			‚Ä¢ Sino genera un nuevo Entry, y lo agrega al inicio de la lista del balde.	
						
		‚Ä¢ Si la cantidad de elementos en la table es >= L, entonces llama a Rehash( ), 
			este m√©todo crea una nueva tabla con el doble de tama√±o de la anterior m√°s uno, y luego va Entry a Entry de la tabla anterior
			reubic√°ndolos en la tabla nueva (recalcula la funci√≥n de hash a cada uno para saber su nueva ubicaci√≥n). 
			Y luego ubica el elemento nuevo en la nueva tabla.			
			
		‚Ä¢ Rehash (parte m√°s salientes del c√≥digo):
		protected void rehash() {
			int oldCapacity = table.length;
			Entry<?,?>[ ] oldMap = table;
			int newCapacity = (oldCapacity << 1) + 1;
			Entry<?,?>[ ] newMap = new Entry<?,?>[newCapacity];
			threshold = (int)(newCapacity * loadFactor;
			table = newMap;
			for (int i = oldCapacity ; i -- > 0 ;) {
				for (Entry<K,V> old = (Entry<K,V>)oldMap[i] ; old != null ; ) {
					Entry<K,V> e = old;
					old = old.next;
					int index = (e.hash & 0x7FFFFFFF) % newCapacity;
					e.next = (Entry<K,V>)newMap[index];
					newMap[index] = e;
				}
			}
		}			
					
		‚Ä¢ Obtiene el valor asociado a una clave con:
			public synchronized V get(Object key) {
				Entry<?,?> tab[ ] = table;
				int hash = key.hashCode();
				int index = (hash & 0x7FFFFFFF) % tab.length;
				for (Entry<?,?> e = tab[index] ; e != null ; e = e.next) { /// busca en la lista vinculada
					if ((e.hash == hash) && e.key.equals(key)) {
						return (V)e.value;
					}
				}
				return null;
			}
		
		‚Ä¢ Busca de forma secuencial el elemento en la lista de Entry correspondiente al balde.
		
	Consideraciones finales:
		‚Ä¢ El crecimiento busca reducir la longitud de las listas de rebalse.
		‚Ä¢ Agregar un elemento es O(1)
		‚Ä¢ Y buscar un elemento puede suponerse en promedio de tiempo constante ”®(1), al igual que el eliminar.
			Esto es en promedio, el peor caso va a depender la longitud de la lista.
		‚Ä¢ Puede ser √∫til y a veces necesario redefinir el m√©todo HashCode para los objetos que usaremos como clave. 
			Por ejemplo si usamos Integer, vemos redefine (override) hashCode = int que contiene, e Equals si los int son iguales.
			
			
‚Ä¢ Supongamos que definimos una HashTable con tama√±o inicial 4 y œÅd = 0,9
‚Ä¢ Entonces resultar√° L = | 4 * 0,9 | = 3
‚Ä¢ Y queremos agregar las siguientes claves x del tipo Integer:
		 
			X          68 40 47 6  76 95 88 23 90 85 31 71 60 10 46 61 50 92 74 7  97 66 1  56

			x mod 4    0  0  3

			x mod 9    5  4  2  6  4  5  7

			N¬∫         1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24


			L = | 9 * 0,9| = 8
			

T√©cnicas abiertas o din√°micas: JAVA HASHMAP
	‚Ä¢ M√°s avanzada que HASTABLE. Tiene algunas diferencias. Es m√°s r√°pida. No es sincronizable.
	
	‚Ä¢ Agrega mejora sobre la lista de rebalse, cuando la cantidad de elementos en la lista supera una cierta cantidad establecida, 
		convierte la lista del balde en un √°rbol binairo de b√∫squeda balanceado, llevando asi los tiempos de b√∫squeda en
		el balde de O(n) a O(log2 n), con n = cantidad elementos del balde. 
		Seg√∫n esta cantidad tiene una lista vinculada o un arbol, por eso los valores de las b√∫squedas.
		
HashMap y HashTable son dos estructuras de datos utilizadas en lenguajes de programaci√≥n como Java para almacenar y recuperar pares clave-valor. 
Aunque comparten algunas similitudes, tambi√©n existen diferencias importantes entre ellas. 
A continuaci√≥n, se presentan las principales diferencias entre HashMap y HashTable:
	‚Ä¢ Sincronizaci√≥n: 
		HashTable es sincronizado, lo que significa que es seguro para su uso en entornos multihilo sin necesidad de tomar medidas adicionales. 
		M√∫ltiples hilos pueden acceder y modificar un objeto HashTable de manera concurrente sin causar problemas de concurrencia. Por otro lado, HashMap no es sincronizado 
		y no garantiza la seguridad en entornos multihilo sin la implementaci√≥n de mecanismos externos de sincronizaci√≥n.

	‚Ä¢ Eficiencia: 
		HashMap es generalmente m√°s eficiente en cuanto a rendimiento que HashTable. Esto se debe a que HashMap no tiene el sobrecosto de sincronizaci√≥n 
		asociado con HashTable. Si no se necesita sincronizaci√≥n, se recomienda utilizar HashMap debido a su mejor rendimiento.

	‚Ä¢ Valores nulos: 
		HashMap permite la inserci√≥n de valores nulos tanto para las claves como para los valores asociados. En cambio, HashTable no permite la inserci√≥n 
		de claves o valores nulos. Si se intenta insertar un valor nulo en un objeto HashTable, se lanzar√° una excepci√≥n NullPointerException.

	‚Ä¢ Iteradores: 
		HashMap proporciona iteradores fail-fast, lo que significa que si se modifica el mapa mientras se itera sobre √©l (excepto a trav√©s de los m√©todos 
		del propio iterador), se lanzar√° una excepci√≥n ConcurrentModificationException. HashTable, por otro lado, no proporciona iteradores fail-fast.

	‚Ä¢ Legado: 
		HashTable es una clase m√°s antigua y se considera una estructura de datos legada. Fue parte de la biblioteca original de Java antes de que se 
		introdujera HashMap en la versi√≥n 1.2 de Java. HashMap fue dise√±ado para reemplazar HashTable y se considera la opci√≥n preferida en la mayor√≠a de los casos.

En resumen, las principales diferencias entre HashMap y HashTable se relacionan con la sincronizaci√≥n, el rendimiento, la manipulaci√≥n de valores nulos, 
el comportamiento de los iteradores y su legado. HashMap ofrece un mejor rendimiento, permite valores nulos y no est√° sincronizado, mientras que HashTable es sincronizado, 
no permite valores nulos y es considerado una opci√≥n legada en comparaci√≥n con HashMap.

		

En general, en una estructura de datos ¬øqu√© hacer si hay claves repetidas?
	‚Ä¢ En cualquier estructura de datos podemos distinguir las siguientes situaciones:
	
		‚Ä¢ Caso 1: La clave de busqueda coincide con algun identificador (clave) de la informaci√≥n almacenada.
			Quiere decir que para cada valor de clave de b√∫squeda se corresponde con un √∫nico registro de datos asociados.
			Por ejemplo una tabla de hashing para datos de personas, con clave de b√∫squeda = DNI. 
			Dado un DNI √©ste identifica a una √∫nica persona.

			¬øQu√© otra clave se le ocurre si hablamos de alumnos de la Facultad?
			La libreta universitaria, LU.
			
		‚Ä¢ Caso 2: La clave de busqueda no coincide con algun identificador de la informaci√≥n almacenada.
			Quiere decir que para cada valor posible de clave de b√∫squeda puedo tener uno o m√°s registros de datos asociados. 
			Esto es un problema ‚Ä¶
			Por ejemplo archivo disperso de personas, con clave de b√∫squeda = Ciudad de Nacimiento. 
			Para cada ciudad de nacimiento vamos a tener una o m√°s personas que nacieron en esa ciudad. 
			Por ejemplo cave de b√∫squeda=‚ÄúTandil‚Äù.
			Dado que no es eficiente almacenar claves repetidas, la estrategia que se utiliza es la llamada lista de factoreo.

			Entry para x=Tandil: Tandil , 
				PunteroListaFactoreo
					Datos Persona1 de Tandil
					Datos Persona2 de Tandil
					Datos Persona3 de Tandil
											La lista de factoreo
													contendr√° los datos de las distintas personas nacidas en Tandil.
					
					
					
					
					
					
					
					
					
					
					